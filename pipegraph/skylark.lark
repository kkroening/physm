file: (statement | _NEWLINE)*

statement: def_stmt | if_stmt | for_stmt | simple_stmt

def_stmt: "def" identifier "(" parameters? ")" ":" suite

parameters: parameter ("," parameter)*

parameter: identifier | identifier "=" test | "*" identifier | "**" identifier

if_stmt: "if" test ":" suite ("elif" test ":" suite)* ["else" ":" suite]

for_stmt: "for" loop_variables "in" expression ":" suite

suite: [_NEWLINE _INDENT statement+ _DEDENT] | simple_stmt

simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE

// ?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE

small_stmt: (return_stmt | break_stmt | continue_stmt | pass_stmt | assign_stmt | expr_stmt | load_stmt)

return_stmt: "return" [expression]
break_stmt: "break"
continue_stmt: "continue"
pass_stmt: "pass"
assign_op: "=" | "+=" | "-=" | "*=" | "/=" | "//=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>="

assign_stmt: expression assign_op expression

expr_stmt: expression

load_stmt: "load" "(" string ("," [identifier "="] string)* [","] ")"

test: lambda_expr | if_expr | primary_expr | unary_expr | binary_expr

lambda_expr: "lambda" [parameters] ":" test

if_expr: test "if" test "else" test

primary_expr: operand | primary_expr dot_suffix | primary_expr call_suffix | primary_expr slice_suffix

operand: identifier | number | string | list_expr | list_comp | dict_expr | dict_comp  | "(" [expression [","]] ")" | ("-" | "+") primary_expr

dot_suffix: "." identifier
call_suffix: "(" [arguments [","]] ")"
slice_suffix: "[" [expression] [":" test [":" test]] "]"

arguments: argument ("," argument)*
argument: test | identifier "=" test | "*" test | "**" test

list_expr: "[" [expression [","]] "]"
list_comp: "[" test (comp_clause)* "]"

dict_expr: "{" [entries [","]] "}"
dict_comp: "{" entry (comp_clause)* "}"
entries: entry ("," entry)*
entry: test ":" test

comp_clause: "for" loop_variables "in" test | "if" test

unary_expr: "not" test

binary_expr: test (binop test)+

binop: "or" | "and" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "in" | "not" "in" | "|" | "^" | "&" | "-" | "+" | "*" | "%" | "/" | "//"

expression: test ("," test)*

loop_variables: primary_expr ("," primary_expr)*


number: DEC_NUMBER | HEX_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER
//string: STRING | LONG_STRING
string: STRING

identifier: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i

DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
IMAG_NUMBER.2: /\d+j|${FLOAT_NUMBER}j/i


%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT
