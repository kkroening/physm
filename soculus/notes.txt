This project is an interesting science experiment but has lots of problems.
- This was built to control blender from pytest cases, so that pytest would be the master and each test would kick off
  a blender process that's remotely controlled.  Blender can actually just import pytest and run it directly, and that
  seems to be a lot smoother.
- child_scope is meant to create a subprocess, but we have no way to handle the case where the subprocess doesn't
  open the socket.  Have to do stupid timeouts.  Should do pipes instead and pass the file into the subprocess
  directly.  Probably shouldn't even be using unix-domain socket.
- Serilization is limited to all the craziness of dill.  There are lots of weird situations of module initialization
  and dill gets confused af.  It seems like a great idea but in practice it's probably insanity.  We essentially have
  a massive state replication problem but without having any sort of commit history or sources of truth.  It's ugly.
- pytest fixtures are difficult to do cleanly.  The fixtures have to be marked with a special decorator to indicate
  that they're supposed to run remotely, and the fixture values have to be passed around.  I got it working with the
  blender example but it doesn't support generators due to dill limitation, which severely limits the power of
  fixtures.
- Ultimately, you really can't just pretend you're running the code locally.  You fundamentally have to know that
  you're crossing RPC boundaries.  I think this could be improved in a future functional language that has proper
  immutable data structures and hashable lambdas and whatnot.  I don't think it's good to try to do this in python
  because there are just too many weird scenarios.

